package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"math/rand"

	"github.com/mehulgohil/go-graphql/graph/model"
)

// CreateVideo is the resolver for the createVideo field.
func (r *mutationResolver) CreateVideo(ctx context.Context, input model.NewVideo) (*model.Video, error) {
	video := model.Video{
		ID:    fmt.Sprintf("T%d", rand.Int()),
		Title: input.Title,
		URL:   input.URL,
	}

	for _, eachUser := range r.Users {
		if eachUser.ID == input.UserID {
			video.Author = eachUser
		}
	}
	if video.Author == nil {
		return nil, errors.New("no user found")
	}

	r.Videos = append(r.Videos, &video)
	return &video, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := model.User{
		ID:   fmt.Sprintf("T%d", rand.Int()),
		Name: input.Name,
		DOB:  input.Dob,
	}

	r.Users = append(r.Users, &user)
	return &user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	for _, eachUser := range r.Resolver.Users {
		if eachUser.ID == id {
			return eachUser, nil
		}
	}
	return nil, nil
}

// Video is the resolver for the video field.
func (r *queryResolver) Video(ctx context.Context, id string) (*model.Video, error) {
	for _, eachVideo := range r.Resolver.Videos {
		if eachVideo.ID == id {
			return eachVideo, nil
		}
	}
	return nil, nil
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context) ([]*model.Video, error) {
	return r.Resolver.Videos, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.Resolver.Users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
